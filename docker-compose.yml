version: '3.8'

services:
  # bAIt-Chat Backend API
  backend:
    build:
      context: .
      target: development
    container_name: bait-chat-backend
    ports:
      - "8000:8000"
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - QSERVER_URL=http://qserver:60610
      - VECTOR_DB_PATH=/app/vector_db
      - KNOWLEDGE_BASE_PATH=/app/knowledge_base
      - LOG_FILE=/app/logs/bait_chat.log
    volumes:
      - ./backend:/app/backend:ro
      - ./config:/app/config:ro
      - ./knowledge_base:/app/knowledge_base:ro
      - ./logs:/app/logs
      - vector_db_data:/app/vector_db
    depends_on:
      - vector_db
    networks:
      - bait-chat-network
    restart: unless-stopped
    command: uvicorn backend.main:app --host 0.0.0.0 --port 8000 --reload

  # Streamlit UI
  frontend:
    build:
      context: .
      target: development
    container_name: bait-chat-frontend
    ports:
      - "8501:8501"
    environment:
      - API_BASE_URL=http://backend:8000
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
    volumes:
      - ./ui:/app/ui:ro
    depends_on:
      - backend
    networks:
      - bait-chat-network
    restart: unless-stopped
    command: streamlit run ui/streamlit_app.py --server.port 8501 --server.address 0.0.0.0

  # Chroma Vector Database
  vector_db:
    image: chromadb/chroma:latest
    container_name: bait-chat-vector-db
    ports:
      - "8900:8000"  # Chroma runs on port 8000 internally
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
    volumes:
      - vector_db_data:/chroma/chroma
    networks:
      - bait-chat-network
    restart: unless-stopped

  # QServer (Mock/Development)
  qserver:
    image: blueskyproject/qserver:latest
    container_name: bait-chat-qserver
    ports:
      - "60610:60610"
      - "60615:60615"  # ZMQ port
    environment:
      - QSERVER_ZMQ_CONTROL_ADDRESS=tcp://*:60615
      - QSERVER_HTTP_SERVER_HOST=0.0.0.0
      - QSERVER_HTTP_SERVER_PORT=60610
    volumes:
      - ./knowledge_base/bits_devices:/startup:ro
    networks:
      - bait-chat-network
    restart: unless-stopped
    command: >
      bash -c "
        start-re-manager --zmq-control-addr tcp://*:60615 --http-server-host 0.0.0.0 --http-server-port 60610 --startup-dir /startup --keep-re &
        qserver-httpserver --zmq-control-addr tcp://localhost:60615 --host 0.0.0.0 --port 60610
      "

  # Redis (for caching - optional)
  redis:
    image: redis:7-alpine
    container_name: bait-chat-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - bait-chat-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Nginx (reverse proxy - optional for production)
  nginx:
    image: nginx:alpine
    container_name: bait-chat-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # SSL certificates if available
    depends_on:
      - backend
      - frontend
    networks:
      - bait-chat-network
    restart: unless-stopped
    profiles:
      - production

  # Prometheus monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: bait-chat-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - bait-chat-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: bait-chat-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - bait-chat-network
    restart: unless-stopped
    profiles:
      - monitoring

# Named volumes
volumes:
  vector_db_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  bait-chat-network:
    driver: bridge

# Development override
# Use: docker-compose -f docker-compose.yml -f docker-compose.override.yml up
---
version: '3.8'

# Override for development
services:
  backend:
    build:
      target: development
    volumes:
      - .:/app
    environment:
      - DEBUG=true
      - RELOAD=true
      - LOG_LEVEL=DEBUG

  frontend:
    volumes:
      - .:/app
    environment:
      - STREAMLIT_LOGGER_LEVEL=debug